{"version":3,"sources":["logo.svg","pages/Home.tsx","api/AdminApi.ts","api/RestClient.ts","stores/auth.ts","pages/Login.tsx","App.tsx","reportWebVitals.ts","stores/signup.ts","stores/index.ts","index.tsx"],"names":["Home","useSelector","state","auth","token","className","src","logo","alt","href","target","rel","getToken","email","password","a","engine","post","logout","headers","Authorization","refresh","me","url","this","axios","create","baseURL","process","responseType","interceptors","response","use","Promise","resolve","error","status","reject","config","localStorage","removeItem","String","REACT_LOCAL_STORAGE_NAME","sessionStorage","REACT_SESSION_STORAGE_NAME","window","location","initialState","getItem","createAsyncThunk","arg","rejectWithValue","UserApi","result","data","access_token","authSlice","createSlice","name","reducers","setAuthState","action","payload","extraReducers","builder","addCase","fulfilled","rejected","errorMessage","message","Login","useForm","register","errors","formState","handleSubmit","useState","isError","setIsError","disabledNext","setDisabledNext","isLoading","setIsLoading","firstDisplay","setFirstDisplay","history","useHistory","dispatch","useDispatch","useEffect","AdminApi","then","catch","login","resultAction","match","persist","setItem","push","ariaHideApp","isOpen","id","to","Alert","variant","show","onClose","dismissible","onSubmit","htmlFor","type","required","Button","block","disabled","App","exact","path","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","signupSlice","saveEmail","savePassword","rootReducer","combineReducers","signup","reducer","store","configureStore","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.693cd7e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport { useSelector } from 'react-redux'\r\nimport { AppState } from '../stores'\r\nimport AdminApi from '../api/AdminApi'\r\n\r\nconst Home: React.FC = () => {\r\n\r\n  const token: string = useSelector<AppState, string>(\r\n    (state: AppState) => state.auth.token\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import RestClient from './RestClient'\r\n\r\nclass AdminApi extends RestClient {\r\n  public getToken = async (email: string, password: string) => {\r\n    return await this.engine.post('/api/admin/token',\r\n      {\r\n        email: email,\r\n        password: password,\r\n      }\r\n    )\r\n  }\r\n  public logout = async (token: string) => {\r\n    return await this.engine.post('/api/admin/logout',\r\n      {},\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    )\r\n  }\r\n  public refresh = async (token: string) => {\r\n    return await this.engine.post('/api/admin/refresh',\r\n      {},\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    )\r\n  }\r\n  public me = async (token: string) => {\r\n    return await this.engine.post('/api/admin/me',\r\n      {},\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\nexport default new AdminApi()\r\n","import axios, { AxiosError, AxiosInstance, AxiosResponse } from 'axios'\r\n\r\nexport default class RestClient {\r\n  protected url: string = ''\r\n\r\n  protected token: string = ''\r\n\r\n  protected engine: AxiosInstance\r\n\r\n  public constructor() {\r\n    this.engine = axios.create({\r\n      baseURL: process.env.REACT_APP_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n      responseType: 'json',\r\n    })\r\n\r\n    this.engine.interceptors.response.use(\r\n      (response: AxiosResponse) => {\r\n        return Promise.resolve(response)\r\n      },\r\n      (error: AxiosError) => {\r\n        if (401 === error.response?.status) {\r\n          if(error.response?.config.url != '/api/admin/me'){\r\n            localStorage.removeItem(String(process.env.REACT_LOCAL_STORAGE_NAME))\r\n            sessionStorage.removeItem(String(process.env.REACT_SESSION_STORAGE_NAME))\r\n            window.location.href = '/login'\r\n          }\r\n        } else {\r\n          return Promise.reject(error)\r\n        }\r\n      }\r\n    )\r\n  }\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AxiosError } from 'axios'\r\nimport UserApi from '../api/AdminApi'\r\n\r\nexport type AuthState = {\r\n  token: string\r\n  error: string | null | undefined\r\n}\r\n\r\ninterface ValidationErrors {\r\n  errorMessage: string\r\n  field_errors: Record<string, string>\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  token:\r\n    localStorage.getItem(String(process.env.REACT_LOCAL_STORAGE_NAME)) ||\r\n    sessionStorage.getItem(String(process.env.REACT_SESSION_STORAGE_NAME)) ||\r\n    '',\r\n  error: null,\r\n}\r\n\r\nexport const getToken = createAsyncThunk<\r\n  AuthState,\r\n  {\r\n    email: string\r\n    password: string\r\n  },\r\n  {\r\n    rejectValue: ValidationErrors\r\n  }\r\n>(\r\n  'auth/getToken',\r\n  async (arg: { email: string; password: string }, { rejectWithValue }) => {\r\n    try {\r\n      const { email, password } = arg\r\n      const result = await UserApi.getToken(email, password)\r\n      return {\r\n        token: result.data.access_token,\r\n        error: null,\r\n      }\r\n    } catch (err) {\r\n      let error: AxiosError<ValidationErrors> = err\r\n      if (!error.response) {\r\n        throw err\r\n      }\r\n      return rejectWithValue(error.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const logout = createAsyncThunk<\r\n  AuthState,\r\n  {\r\n    token: string\r\n  },\r\n  {\r\n    rejectValue: ValidationErrors\r\n  }\r\n>('auth/logout', async (arg: { token: string }, { rejectWithValue }) => {\r\n  try {\r\n    const { token } = arg\r\n    const result = await UserApi.logout(token)\r\n    return {\r\n      token: '',\r\n      error: null,\r\n    }\r\n  } catch (err) {\r\n    let error: AxiosError<ValidationErrors> = err\r\n    if (!error.response) {\r\n      throw err\r\n    }\r\n    return rejectWithValue(error.response.data)\r\n  }\r\n})\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    setAuthState: (state: AuthState, action: PayloadAction<AuthState>) => {\r\n      return action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getToken.fulfilled, (state: AuthState, action) => {\r\n      state.token = action.payload.token\r\n    })\r\n    builder.addCase(getToken.rejected, (state: AuthState, action) => {\r\n      if (action.payload) {\r\n        state.error = action.payload.errorMessage\r\n      } else {\r\n        state.error = action.error.message\r\n      }\r\n    })\r\n    builder.addCase(logout.fulfilled, (state: AuthState, action) => {\r\n      state.token = action.payload.token\r\n    })\r\n    builder.addCase(logout.rejected, (state: AuthState, action) => {\r\n      if (action.payload) {\r\n        state.error = action.payload.errorMessage\r\n      } else {\r\n        state.error = action.error.message\r\n      }\r\n    })\r\n  },\r\n})\r\n","// https://qiita.com/nakamo-03/items/446a199f076c81d55c70\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Alert, Button } from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { AppDispatch, AppState } from '../stores'\r\nimport { getToken } from '../stores/auth'\r\nimport AdminApi from '../api/AdminApi'\r\nimport Modal from \"react-modal\"\r\n\r\ninterface LoginFormInputs {\r\n  email: string\r\n  password: string\r\n  persist: boolean\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n  const { register, formState: { errors }, handleSubmit } = useForm<LoginFormInputs>()\r\n  const [isError, setIsError] = useState<boolean>(false)\r\n  const [disabledNext, setDisabledNext] = useState<boolean>(false)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [firstDisplay, setFirstDisplay] = useState(true)\r\n\r\n  const history = useHistory()\r\n  const dispatch: AppDispatch = useDispatch()\r\n  const token: string = useSelector<AppState, string>(\r\n    (state: AppState) => state.auth.token\r\n  )\r\n\r\n  useEffect(() => {\r\n    if(token != '' && firstDisplay){\r\n      AdminApi.me(token).then((result) => {\r\n        window.location.href = '/'\r\n      }).catch((error) => {\r\n        setIsLoading(false)\r\n      });\r\n    } else if(token == ''){\r\n      setIsLoading(false)\r\n    }\r\n    setFirstDisplay(false)\r\n  })\r\n\r\n  const login = async (data: LoginFormInputs) => {\r\n    setDisabledNext(true)\r\n    const resultAction = await dispatch(\r\n      getToken({\r\n        email: data.email,\r\n        password: data.password,\r\n      })\r\n    )\r\n    setDisabledNext(false)\r\n    if (getToken.fulfilled.match(resultAction)) {\r\n      if (data.persist) {\r\n        localStorage.setItem(\r\n          String(process.env.REACT_LOCAL_STORAGE_NAME),\r\n          resultAction.payload.token\r\n        )\r\n      } else {\r\n        sessionStorage.setItem(\r\n          String(process.env.REACT_SESSION_STORAGE_NAME),\r\n          resultAction.payload.token\r\n        )\r\n      }\r\n      history.push('/')\r\n    } else {\r\n      setIsError(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n      <Modal className=\"full-modal\" ariaHideApp={false} isOpen={isLoading}>\r\n        <></>\r\n      </Modal>\r\n\r\n      <div id=\"header\">\r\n        <h1>ログイン</h1>\r\n        <div className=\"arrow-pos\">\r\n          <Link to=\"/login_signup\" className=\"l-arrow\"></Link>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"main-content\">\r\n        <Alert\r\n          variant=\"danger\"\r\n          show={isError}\r\n          onClose={() => setIsError(false)}\r\n          dismissible\r\n        >\r\n          <p>ログインに失敗しました。</p>\r\n        </Alert>\r\n        <div className=\"signup-area\">\r\n          <form onSubmit={handleSubmit(login)}>\r\n            <p className=\"mb10\">\r\n              <label htmlFor=\"\">メールアドレス</label>\r\n            </p>\r\n            <input\r\n              type=\"email\"\r\n              className=\"mb30\"\r\n              {...register(\"email\", { required: 'メールアドレスは必須です。' })}\r\n            />\r\n            {errors.email && (\r\n              <Alert variant=\"danger\">{errors.email.message}</Alert>\r\n            )}\r\n\r\n            <p className=\"mb10\">\r\n              <label htmlFor=\"\">パスワード</label>\r\n            </p>\r\n            <input\r\n              type=\"password\"\r\n              className=\"mb10\"\r\n              {...register(\"password\", { required: 'パスワードは必須です。' })}\r\n\r\n            />\r\n            {errors.password && (\r\n              <Alert variant=\"danger\">{errors.password.message}</Alert>\r\n            )}\r\n\r\n            <div className=\"checkbox-area mb40\">\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"checkbox-input\"\r\n                  {...register(\"persist\", { required: true })}\r\n                />\r\n                <span className=\"checkbox-parts\">ログイン状態を保持する</span>\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"button-bottom-area\">\r\n              <Button\r\n                variant=\"patient-primary\"\r\n                type=\"submit\"\r\n                block\r\n                disabled={disabledNext}\r\n              >\r\n                ログイン\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport PrivateRoute from './PrivateRoute'\r\nimport Home from './pages/Home'\r\nimport Login from './pages/Login'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" children={<Home />} />\r\n        <Route path=\"/login\" children={<Login />} />\r\n        {/* <PrivateRoute path=\"/post_article\" children={<PostArticle />} /> */}\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport type SignupState = {\r\n  email: string\r\n  password: string\r\n}\r\n\r\nconst initialState: SignupState = {\r\n  email: '',\r\n  password: '',\r\n}\r\n\r\nexport const signupSlice = createSlice({\r\n  name: 'signup',\r\n  initialState,\r\n  reducers: {\r\n    saveEmail: (state: SignupState, action: PayloadAction<string>) => {\r\n      return { ...state, email: action.payload }\r\n    },\r\n    savePassword: (state: SignupState, action: PayloadAction<string>) => {\r\n      return { ...state, password: action.payload }\r\n    },\r\n  },\r\n})\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit'\r\nimport { authSlice, AuthState } from './auth'\r\nimport { signupSlice, SignupState } from './signup'\r\n\r\nexport type AppState = {\r\n  signup: SignupState\r\n  auth: AuthState\r\n}\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n  signup: signupSlice.reducer,\r\n  auth: authSlice.reducer,\r\n})\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\n// import './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './stores'\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById('main-wrap')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}